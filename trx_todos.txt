#####################################
### Issues / errors in processing ###
#####################################

I9: 14jul16 svn:
==================
trx_create_sign.sh: base58decoding: need to extract beginning "1"s and count them...
#maybe like this:  /^(1*)/
The logic is described below, at the end - need to verify...

I10: 18jul16 svn:
==================
testcases_trx2txt.sh: testcase 20 fails on OpenBSD, cause parameter buffer is only 2048 Bytes

I13: 27jul16, svn:
==================
trx_in_sig_script.sh and it's graph:
--> Status 32-34 not required, cause unsigned raw trx are handled in trx2txt.sh, and there
    we call trx_out_script - so no code required here ...

I14: 30jul16, svn:
==================
try cold storage with this: 1JmPRD_unspent.txt
make sure, fees don't get weird, and all three trx are used ...

I15: 31jul16, svn:
==================
testcases_trx2txt.sh: testcase 8 for trx2txt.sh does not show the multisig "in" addresses
testcases_trx2txt.sh: testcase 9 for trx2txt.sh does not show the multisig "in" addresses
--> blockchain.info shows the multisig addresses. How do they know???


I16: 31jul16, svn:
==================
testcases_trx2txt.sh: testcase 9 on OpenBSD failes this way:
need to take care for buffering input?
TESTCASE 9c: 
cut: [-bcf] list: 2072 too large (max 2048)
cut: [-bcf] list: 2080 too large (max 2048)
cut: [-bcf] list: 2082 too large (max 2048)
...


#####################################
### Extensions / new Requirements ###
#####################################
E1:
===============
can it be extended for usage in testnet?

E2:
===============
For important values: make use of a 2of3 multisig with one in cold storage
generate 3 addresses (and 3 private keys) A, B & C... and 
create 1 multisig address (D) using those 3 in a 2-of-3 configuration

the multisig address starts with a "3", all the others (A,B & C) should be "1". 
send funds into the multisig address D (starts with a "3")... 
make sure all the private keys for your A, B & C addresses are all backed up/stored independently of each other. 
to take funds out of D, create a transaction using one of A,B or C.. and then co-sign the transaction using one of the other addresses.



########################################
### Some explanations on leading zeros #
########################################

1. Convert each leading "one" to a single byte of value 0
2. Convert the remaining digits from base58 to hex
3. The result should be exactly 25 bytes long, if not you have an invalid address.
4. Make sure that the leading byte is either a value of 0 or a value of 5, if not you have an invalid address.
5. Remove the trailing 4 bytes, leaving you with a 21 byte hex value.
6. Calculate SHA256(SHA256()) on the 21 bytes.
7. Make sure the first 4 bytes of step 6 are equal to the 4 bytes removed in step 5, if not you have an invalid address.
8. If you get this far without determining that the address is invalid, then the address is valid.

(programmatically, you may find it easier to reverse the order of the first two steps)



Lets walk through the steps and see what happens:

Starting with an RIPEMD-160 hash of 20 bytes that are all 0's...
0000000000000000000000000000000000000000

Add a version byte in front (in the case of a P2PKH address, that would be a byte with value 0).
000000000000000000000000000000000000000000

Now we have 21 bytes that are all 0's.
Calculate a checksum on this value:
SHA256(SHA256(000000000000000000000000000000000000000000)) = 
94a00911c4da27f9271727ffa7a14d8d5588fc0fff9964340ec4065f387e622b

Append the first 4 bytes (8 characters) of the checksum to the RIPEMD-160 hash with version byte:
00000000000000000000000000000000000000000094a00911

Temporarily ignore leading zero bytes:
94a00911

Convert the value from hex to base58:
0x94a00911 =
4oLvT2 (base 58)

Each LEADING 00 BYTE is replaced with a single 1:
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1

Concatenate 21 ones with 6 base58 digits:
1111111111111111111114oLvT2

21 "ones" plus 6 base58 digits = 27 characters

#################################################################

Now lets try the same with 19 zeros and a bytes with value 1...
0000000000000000000000000000000000000001

Add a version byte in front (in the case of a P2PKH address, that would be a byte with value 0).
000000000000000000000000000000000000000001

Now we have 20 bytes that are all 0's, followed by a byte that is represented in hex as "01"
Calculate a checksum on this value:
SHA256(SHA256(000000000000000000000000000000000000000001)) = 
9d35b5b9d5befcf2d6b89994f7f64279b0645d5d4a5f1a6fa2dcc615bbed04ef

Append the first 4 bytes (8 characters) of the checksum to the RIPEMD-160 hash with version byte:
0000000000000000000000000000000000000000019d35b5b9

Temporarily ignore leading zero bytes:
019d35b5b9

Convert the value from hex to base58:
0x019d35b5b9 =
BZbvjr (base 58)

Each LEADING 00 BYTE is replaced with a single 1:
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1

Concatenate 20 ones with 6 base58 digits:
111111111111111111111BZbvjr

20 "ones" plus 6 base58 digits = 26 characters

(notice that the number of leading 0 bytes was decreased by 1 because the last byte was now a 01, however the number of base58 digits didn't increase since both 0x94a00911 and 0x019d35b5b9 can be represented with 6 base58 digits (4oLvT2 and BZbvjr respectively).


